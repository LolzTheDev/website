---
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import type { Sponsor } from "../components/SponsorCard.astro";
import SponsorCard from "../components/SponsorCard.astro";

interface SponsorResponse {
  data: {
    account: {
      contributors: {
        nodes: Sponsor[];
      };
    };
  };
}

const sponsors = (
  (await (
    await fetch("https://opencollective.com/api/graphql/v2", {
      body: JSON.stringify({
        operationName: "BannerTopContributors",
        variables: {
          collectiveSlug: "sern",
        },
        query:
          "query BannerTopContributors($collectiveSlug: String!) {\n  account(slug: $collectiveSlug, throwIfMissing: false) {\n    id\n    currency\n    slug\n    ... on AccountWithContributions {\n      contributors(limit: 150) {\n        totalCount\n        nodes {\n          id\n          name\n          roles\n          isAdmin\n          isCore\n          isBacker\n          since\n          image\n          description\n          collectiveSlug\n          totalAmountDonated\n          type\n          publicMessage\n          isIncognito\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
      }),
      method: "POST",
      headers: {
        "content-type": "application/json",
      },
    })
  ).json()) as SponsorResponse
).data.account.contributors.nodes.filter((s) => s.totalAmountDonated > 0);
---

<StarlightPage frontmatter={{ title: "Sponsors", template: "splash" }}>
  <p class="text-lg">
    These amazing people help us keep the project alive. A big thanks from the
    team!
  </p>
  <div class="grid grid-cols-2 md:grid-cols-5 gap-4 not-content">
    {sponsors.map((sponsor) => <SponsorCard {...sponsor} />)}
  </div>
</StarlightPage>
