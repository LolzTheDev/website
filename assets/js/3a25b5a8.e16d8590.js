"use strict";(self.webpackChunk_sern_website=self.webpackChunk_sern_website||[]).push([[7804],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),g=p(t),u=a,m=g["".concat(s,".").concat(u)]||g[u]||c[u]||o;return t?r.createElement(m,l(l({ref:n},d),{},{components:t})):r.createElement(m,l({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[g]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6720:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(8168),a=(t(6540),t(5680));const o={slug:"2.0.0",title:"Release 2.0.0",authors:["jacoobes"],tags:["release"]},l=void 0,i={permalink:"/blog/2.0.0",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-12-13-mdx-blog-post.md",source:"@site/blog/2022-12-13-mdx-blog-post.md",title:"Release 2.0.0",description:"2.0 Release",date:"2022-12-13T00:00:00.000Z",formattedDate:"December 13, 2022",tags:[{label:"release",permalink:"/blog/tags/release"}],readingTime:3.63,hasTruncateMarker:!1,authors:[{name:"jacoobes",title:"Head Dev",url:"https://github.com/jacoobes",imageURL:"https://github.com/jacoobes.png",key:"jacoobes"}],frontMatter:{slug:"2.0.0",title:"Release 2.0.0",authors:["jacoobes"],tags:["release"]},prevItem:{title:"Release 2.5.0",permalink:"/blog/2.5.0"},nextItem:{title:"How to get started with sern!",permalink:"/blog/getting-started"}},s={authorsImageUrls:[void 0]},p=[{value:"2.0 Release",id:"20-release",level:2},{value:"Plugin Support for Event Modules",id:"plugin-support-for-event-modules",level:3},{value:"Dependency Injection and Decoupling",id:"dependency-injection-and-decoupling",level:2},{value:"How do I start?",id:"how-do-i-start",level:3},{value:"New CommandTypes",id:"new-commandtypes",level:2},{value:"Typings Simplification",id:"typings-simplification",level:2},{value:"Breaking Changes",id:"breaking-changes",level:2},{value:"Context refactoring",id:"context-refactoring",level:2}],d={toc:p},g="wrapper";function c(e){let{components:n,...t}=e;return(0,a.yg)(g,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"20-release"},"2.0 Release"),(0,a.yg)("p",null,"Join our ",(0,a.yg)("a",{parentName:"p",href:"https://sern.dev/discord"},"discord"),"! ",(0,a.yg)("br",null),"\nWow! We're finally increasing our semantic versioning by +",(0,a.yg)("inlineCode",{parentName:"p"},"1.7.9.")," ",(0,a.yg)("br",null),"\nWhat does this mean?"),(0,a.yg)("h3",{id:"plugin-support-for-event-modules"},"Plugin Support for Event Modules"),(0,a.yg)("p",null,"You can now use plugins for event modules. Previous version would throw an error if the\n",(0,a.yg)("inlineCode",{parentName:"p"},"plugins")," field was populated."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"export function commandPlTest() : SernEmitterPlugin {\n    return {\n        type: PluginType.Command,\n        execute: ({ mod}, controller) => {\n            if(mod.name === 'module.register') {\n                console.log('Event Module created correctly')\n                return controller.next()\n            }\n            console.log('event name is wrong')\n            return controller.stop()\n        }\n    }\n}\n")),(0,a.yg)("p",null,"Applying this plugin to some ",(0,a.yg)("inlineCode",{parentName:"p"},"eventModule"),": "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"export default eventModule({\n    name: 'error',\n    type: EventType.Sern,\n    plugins: [commandPlTest()],\n    execute(m) {\n        console.log(m)\n    },\n})\n")),(0,a.yg)("h2",{id:"dependency-injection-and-decoupling"},"Dependency Injection and Decoupling"),(0,a.yg)("p",null,"The powerful npm package ",(0,a.yg)("inlineCode",{parentName:"p"},"iti")," decouples sern even more.\nDecoupling data structures with the Inversion of Control pattern separates data from logic, which will help speed production\nand make sern even more customizable than before."),(0,a.yg)("h3",{id:"how-do-i-start"},"How do I start?"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/index.ts"',title:'"src/index.ts"'},"//With typescript, you can customize / augment your typings.\ninterface MyDependencies extends Dependencies {\n    '@sern/client' : Singleton<Client>;\n    '@sern/logger' : Singleton<DefaultLogging>\n}\n\nexport const useContainer = Sern.makeDependencies<MyDependencies>({\n//  exclude: new Set(['@sern/logger']), don't autofill optional dependencies\n    build: root => root\n        .add({ '@sern/client': single(client)  }) \n        .add({ '@sern/logger': single(new DefaultLogging()) })\n});\n\nSern.init({\n    defaultPrefix: '!', // removing defaultPrefix will shut down text commands\n    commands: 'src/commands',\n    // events: 'src/events' (optional),\n    containerConfig : {\n        get: useContainer //pass in your dependency getter here\n    }\n});\n\n")),(0,a.yg)("p",null,"Using the ",(0,a.yg)("inlineCode",{parentName:"p"},"Sern#makeDependencies")," function, inject your dependencies.\nWe'll use specific dependencies that are created with the ",(0,a.yg)("inlineCode",{parentName:"p"},"@sern/keyword"),"\nkey.\nUsing typescript to display all ",(0,a.yg)("inlineCode",{parentName:"p"},"keywords")," and what they represent:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"export interface Dependencies {\n    '@sern/client': Singleton<EventEmitter>; //Discord Client\n    '@sern/logger'?: Singleton<Logging>; //Logger\n    '@sern/emitter': Singleton<SernEmitter>; //SernEmitter\n    '@sern/store' : Singleton<ModuleStore>; //Stores all Command Modules\n    '@sern/modules' : Singleton<ModuleManager>; //Manages Modules\n    '@sern/errors': Singleton<ErrorHandling>; //A Lifetime / Crash Handler\n}\n")),(0,a.yg)("admonition",{type:"danger"},(0,a.yg)("p",{parentName:"admonition"},"Sern#addExternal has been deprecated and removed in favor of Sern#makeDependencies")),(0,a.yg)("p",null,"At the moment,  one optional dependency, ",(0,a.yg)("inlineCode",{parentName:"p"},"@sern/logger"),", exists. If not added explicitly,\nwe'll ",(0,a.yg)("strong",{parentName:"p"},"autofill")," with a ",(0,a.yg)("a",{parentName:"p",href:"https://sern.dev/docs/api/classes/defaultlogging"},"DefaultLogger"),"."),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"If you don't  want a logger, add it to the\n",(0,a.yg)("inlineCode",{parentName:"p"},"exclude")," field while composing dependencies.")),(0,a.yg)("p",null,"Use your generated dependency getter ",(0,a.yg)("inlineCode",{parentName:"p"},"useContainer")," (use whatever name you want), access them\nfrom anywhere."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"the function ",(0,a.yg)("a",{parentName:"p",href:"https://sern.dev/docs/api/modules#usecontainerraw"},"useContainerRaw")," is provided for direct access to dependencies and the internal\ndata structure. Use this wisely as no guarantees are made and crashes can happen.")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"build")," field follows ",(0,a.yg)("a",{parentName:"p",href:"https://itijs.org/docs/quick-start#usage"},"createContainer")," function call."),(0,a.yg)("h2",{id:"new-commandtypes"},"New CommandTypes"),(0,a.yg)("p",null,"2.0 includes all the new role select menus. ",(0,a.yg)("inlineCode",{parentName:"p"},"CommandType.MenuSelect")," has been renamed into\n",(0,a.yg)("inlineCode",{parentName:"p"},"CommandType.StringSelect"),". The remaining SelectMenus are\n",(0,a.yg)("inlineCode",{parentName:"p"},"CommandType.RoleSelect"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"CommandType.ChannelSelect"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"CommandType.UserSelect"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"CommandType.MentionableSelect")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript",metastring:'title="commands/roleselect.ts"',title:'"commands/roleselect.ts"'},"export default commandModule({\n    type: CommandType.RoleSelect,\n    execute(ctx) {\n        ctx.reply('role select')\n    },\n})\n")),(0,a.yg)("p",null,"In addition, commandModules with ContextMenus have been renamed."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"- CommandType.MenuUser, CommandType.MenuMsg \n+ CommandType.CtxUser, CommandType.CtxMsg\n")),(0,a.yg)("h2",{id:"typings-simplification"},"Typings Simplification"),(0,a.yg)("p",null,"Pre 2.0: "),(0,a.yg)("img",{src:"https://cdn.discordapp.com/attachments/820348341358952550/1038577974829666386/image.png"}),(0,a.yg)("br",null)," ",(0,a.yg)("br",null)," ",(0,a.yg)("br",null),"Post 2.0:",(0,a.yg)("br",null),(0,a.yg)("img",{src:"https://cdn.discordapp.com/attachments/820348341358952550/1052623728489550015/image.png"}),(0,a.yg)("p",null,"CommandPlugin<T",">"," and EventPlugin<T",">"," typings have also been static'ified, transformed from types to interfaces"),(0,a.yg)("h2",{id:"breaking-changes"},"Breaking Changes"),(0,a.yg)("img",{src:"https://img.srizan.dev/Discord_z8Sn1UBfEe.png"}),(0,a.yg)("br",null),"All deprecation warnings from previous versions have taken effect, and are removed in 2.0.",(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"- type Module = EventModule | CommandModule\n+ type AnyModule = EventModule | CommandModule\n\n-export type SpreadParams<T extends (...args: never) => unknown> = (\n-    args: Parameters<T>[number],\n- ) => unknown;\n")),(0,a.yg)("p",null,"Override type has been removed due to redundancy"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"- discord.js : 14.5\n+ discord.js : 14.7\n\n-typescript:  4.7\n+ typescript:  4.9\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"+ interface Wrapper {\n+    readonly defaultPrefix?: string;\n+    readonly commands: string;\n+    readonly events?: string;\n+    readonly containerConfig : {\n+        get: (...keys: (keyof Dependencies)[]) => unknown[];\n+    }\n+}\n\n- interface Wrapper {\n-    readonly client: Client;\n-    readonly sernEmitter?: SernEmitter;\n-    readonly defaultPrefix?: string;\n-    readonly commands: string;\n-    readonly events?:\n-        | string\n-        | { mod: EventModule; absPath: string }[]\n-        | (() => { mod: EventModule; absPath: string }[]);\n-}\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"+ DefaultLogger\n+ DefaultModuleManager\n+ SernEmitter\n+ DefaultErrorHandling\n+ type Singleton<T> = () => T\n+ type Transient<T> = () => () => T; \n+ type LogPayload<T = unknown> = { message: T }\n+ export const single = <T>() => T\n+ export const many = <T>() => () => T\n")),(0,a.yg)("p",null,"Including the previous section, some names to symbols and data structures were altered to\nbe better represented. view ",(0,a.yg)("a",{parentName:"p",href:"/404.html"},"changelog")),(0,a.yg)("h2",{id:"context-refactoring"},"Context refactoring"),(0,a.yg)("p",null,"The context data structure has been internally altered to represent its dynamics better."))}c.isMDXComponent=!0}}]);