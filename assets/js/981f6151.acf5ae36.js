"use strict";(self.webpackChunk_sern_website=self.webpackChunk_sern_website||[]).push([[703],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),m=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(n),u=o,y=c["".concat(i,".").concat(u)]||c[u]||d[u]||r;return n?a.createElement(y,l(l({ref:t},p),{},{components:n})):a.createElement(y,l({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=c;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var m=2;m<r;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1830:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:3},l="First Command",s={unversionedId:"guide/walkthrough/first-command",id:"guide/walkthrough/first-command",title:"First Command",description:"We will dissect a basic command.",source:"@site/docs/guide/walkthrough/first-command.md",sourceDirName:"guide/walkthrough",slug:"/guide/walkthrough/first-command",permalink:"/docs/guide/walkthrough/first-command",draft:!1,editUrl:"https://github.com/sern-handler/website/edit/main/docs/guide/walkthrough/first-command.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"CLI",permalink:"/docs/guide/walkthrough/cli"},next:{title:"First Event Module",permalink:"/docs/guide/walkthrough/first-event"}},i={},m=[{value:"Types of command modules",id:"types-of-command-modules",level:3}],p={toc:m};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"first-command"},"First Command"),(0,o.kt)("p",null,"We will dissect a basic command.\nIf you installed a new project via the cli, This is the ",(0,o.kt)("inlineCode",{parentName:"p"},"ping")," command located in src/commands folder."),(0,o.kt)("p",null,"Typescript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { commandModule, CommandType } from '@sern/handler';\n\nexport default commandModule({\n    type: CommandType.Both,\n    plugins: [],\n    description: 'A ping command',\n    //alias : [],\n    execute: async (ctx, args) => {\n        await ctx.reply({ content: 'Pong \ud83c\udfd3' });\n    },\n});\n")),(0,o.kt)("p",null,"Javascript"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const { CommandType, commandModule } = require('@sern/handler');\n\nexports.default = commandModule({\n    type: CommandType.Both,\n    plugins: [],\n    description: 'A ping command',\n    //alias : [],\n    execute: async (ctx, args) => {\n        await ctx.reply('Pong \ud83c\udfd3');\n    },\n})\n")),(0,o.kt)("p",null,"To view what each of these properties mean in depth, visit the ",(0,o.kt)("a",{parentName:"p",href:"https://sern-handler.js.org/docs/api/enums/CommandType"},"official documentation"),"."),(0,o.kt)("h3",{id:"types-of-command-modules"},"Types of command modules"),(0,o.kt)("p",null,"Every command module ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," is part of an enum. This field allows type inference for the rest of a module's fields. ",(0,o.kt)("br",null),"\nAll the command types can be found in the ",(0,o.kt)("a",{parentName:"p",href:"https://sern-handler.js.org/docs/api/enums/CommandType"},"official documentation"),"!"),(0,o.kt)("p",null,"So, lets say you want to make a command module that listens to modals. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": Keep in mind you'll need to send a modal with a custom id ",(0,o.kt)("inlineCode",{parentName:"p"},"dm-me"),". This example below is the response to a modal being sent."),(0,o.kt)("br",null),(0,o.kt)("p",null,"Typescript:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { commandModule, CommandType } from '@sern/handler';\nexport default commandModule({\n        name: 'dm-me',\n        type: CommandType.Modal,\n        async execute (modal) {\n            const value = modal.fields.getTextInputValue('message');\n            modal.client.users.fetch('182326315813306368').then( u =>\n                u.send(value + ` from ${modal.user}`)\n            );\n            modal.reply( { ephemeral:true, content: 'Sent' })\n        }\n});\n")),(0,o.kt)("p",null,"Javascript:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const { CommandType, commandModule } = require('@sern/handler');\nexports.default = commandModule({\n        name: 'dm-me',\n        type: CommandType.Modal,\n        async execute (modal) {\n            const value = modal.fields.getTextInputValue('message');\n            modal.client.users.fetch('182326315813306368').then( u =>\n                u.send(value + ` from ${modal.user}`)\n            );\n            modal.reply( { ephemeral:true, content: 'Sent' })\n        }\n});\n")),(0,o.kt)("p",null,"Commands are straight forward. Keep in mind, every other property on the commandModule object is\noptional ",(0,o.kt)("strong",{parentName:"p"},"except")," the type and execute function."),(0,o.kt)("h1",{id:"context-class"},"Context class"),(0,o.kt)("p",null,"The provided Context class helps with modules of ",(0,o.kt)("inlineCode",{parentName:"p"},"CommandType.Both")," (A mixture of slash / legacy commands)."),(0,o.kt)("p",null,"The Context class is passed into modules with type :"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"CommandType.Both")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"CommandType.Slash")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"CommandType.Text"))),(0,o.kt)("p",null,"This data structure helps interop between legacy commands and slash commands with ease."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"View the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/classes/Context"},"docs"))),(0,o.kt)("p",null,"Typescript:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export default commandModule({\n        name: 'ping',\n        type: CommandType.Both,\n        async execute(ctx: Context) {\n            await ctx.reply(`pong ${ctx.user}`) \n            // .reply is shared between both message and interaction!\n            // So is an User object!\n        }\n});\n")),(0,o.kt)("p",null,"Javascript:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"exports.default = commandModule({\n        name: 'ping',\n        type: CommandType.Both,\n        async execute(ctx) { //ctx is a Context instance\n            await ctx.reply(`pong ${ctx.user}`) \n            // .reply is shared between both message and interaction!\n            // So is an User object!\n        }\n});\n")))}d.isMDXComponent=!0}}]);