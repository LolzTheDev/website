"use strict";(self.webpackChunk_sern_website=self.webpackChunk_sern_website||[]).push([[7804],{9619:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=t(4848),s=t(8453);const o={slug:"2.0.0",title:"Release 2.0.0",authors:["jacoobes"],tags:["release"]},i=void 0,a={permalink:"/blog/2.0.0",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-12-13-mdx-blog-post.md",source:"@site/blog/2022-12-13-mdx-blog-post.md",title:"Release 2.0.0",description:"2.0 Release",date:"2022-12-13T00:00:00.000Z",formattedDate:"December 13, 2022",tags:[{label:"release",permalink:"/blog/tags/release"}],readingTime:3.63,hasTruncateMarker:!1,authors:[{name:"jacoobes",title:"Head Dev",url:"https://github.com/jacoobes",imageURL:"https://github.com/jacoobes.png",key:"jacoobes"}],frontMatter:{slug:"2.0.0",title:"Release 2.0.0",authors:["jacoobes"],tags:["release"]},unlisted:!1,prevItem:{title:"Release 2.5.0",permalink:"/blog/2.5.0"},nextItem:{title:"How to get started with sern!",permalink:"/blog/getting-started"}},d={authorsImageUrls:[void 0]},l=[{value:"2.0 Release",id:"20-release",level:2},{value:"Plugin Support for Event Modules",id:"plugin-support-for-event-modules",level:3},{value:"Dependency Injection and Decoupling",id:"dependency-injection-and-decoupling",level:2},{value:"How do I start?",id:"how-do-i-start",level:3},{value:"New CommandTypes",id:"new-commandtypes",level:2},{value:"Typings Simplification",id:"typings-simplification",level:2},{value:"Breaking Changes",id:"breaking-changes",level:2},{value:"Context refactoring",id:"context-refactoring",level:2}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"20-release",children:"2.0 Release"}),"\n",(0,r.jsxs)(n.p,{children:["Join our ",(0,r.jsx)(n.a,{href:"https://sern.dev/discord",children:"discord"}),"! ",(0,r.jsx)(n.br,{}),"\nWow! We're finally increasing our semantic versioning by +",(0,r.jsx)(n.code,{children:"1.7.9."})," ",(0,r.jsx)(n.br,{}),"\nWhat does this mean?"]}),"\n",(0,r.jsx)(n.h3,{id:"plugin-support-for-event-modules",children:"Plugin Support for Event Modules"}),"\n",(0,r.jsxs)(n.p,{children:["You can now use plugins for event modules. Previous version would throw an error if the\n",(0,r.jsx)(n.code,{children:"plugins"})," field was populated."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export function commandPlTest() : SernEmitterPlugin {\n    return {\n        type: PluginType.Command,\n        execute: ({ mod}, controller) => {\n            if(mod.name === 'module.register') {\n                console.log('Event Module created correctly')\n                return controller.next()\n            }\n            console.log('event name is wrong')\n            return controller.stop()\n        }\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Applying this plugin to some ",(0,r.jsx)(n.code,{children:"eventModule"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export default eventModule({\n    name: 'error',\n    type: EventType.Sern,\n    plugins: [commandPlTest()],\n    execute(m) {\n        console.log(m)\n    },\n})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"dependency-injection-and-decoupling",children:"Dependency Injection and Decoupling"}),"\n",(0,r.jsxs)(n.p,{children:["The powerful npm package ",(0,r.jsx)(n.code,{children:"iti"})," decouples sern even more.\nDecoupling data structures with the Inversion of Control pattern separates data from logic, which will help speed production\nand make sern even more customizable than before."]}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-start",children:"How do I start?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="src/index.ts"',children:"//With typescript, you can customize / augment your typings.\ninterface MyDependencies extends Dependencies {\n    '@sern/client' : Singleton<Client>;\n    '@sern/logger' : Singleton<DefaultLogging>\n}\n\nexport const useContainer = Sern.makeDependencies<MyDependencies>({\n//  exclude: new Set(['@sern/logger']), don't autofill optional dependencies\n    build: root => root\n        .add({ '@sern/client': single(client)  }) \n        .add({ '@sern/logger': single(new DefaultLogging()) })\n});\n\nSern.init({\n    defaultPrefix: '!', // removing defaultPrefix will shut down text commands\n    commands: 'src/commands',\n    // events: 'src/events' (optional),\n    containerConfig : {\n        get: useContainer //pass in your dependency getter here\n    }\n});\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Using the ",(0,r.jsx)(n.code,{children:"Sern#makeDependencies"})," function, inject your dependencies.\nWe'll use specific dependencies that are created with the ",(0,r.jsx)(n.code,{children:"@sern/keyword"}),"\nkey.\nUsing typescript to display all ",(0,r.jsx)(n.code,{children:"keywords"})," and what they represent:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export interface Dependencies {\n    '@sern/client': Singleton<EventEmitter>; //Discord Client\n    '@sern/logger'?: Singleton<Logging>; //Logger\n    '@sern/emitter': Singleton<SernEmitter>; //SernEmitter\n    '@sern/store' : Singleton<ModuleStore>; //Stores all Command Modules\n    '@sern/modules' : Singleton<ModuleManager>; //Manages Modules\n    '@sern/errors': Singleton<ErrorHandling>; //A Lifetime / Crash Handler\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"danger",children:(0,r.jsx)(n.p,{children:"Sern#addExternal has been deprecated and removed in favor of Sern#makeDependencies"})}),"\n",(0,r.jsxs)(n.p,{children:["At the moment,  one optional dependency, ",(0,r.jsx)(n.code,{children:"@sern/logger"}),", exists. If not added explicitly,\nwe'll ",(0,r.jsx)(n.strong,{children:"autofill"})," with a ",(0,r.jsx)(n.a,{href:"https://sern.dev/docs/api/classes/defaultlogging",children:"DefaultLogger"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["If you don't  want a logger, add it to the\n",(0,r.jsx)(n.code,{children:"exclude"})," field while composing dependencies."]})}),"\n",(0,r.jsxs)(n.p,{children:["Use your generated dependency getter ",(0,r.jsx)(n.code,{children:"useContainer"})," (use whatever name you want), access them\nfrom anywhere."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["the function ",(0,r.jsx)(n.a,{href:"https://sern.dev/docs/api/modules#usecontainerraw",children:"useContainerRaw"})," is provided for direct access to dependencies and the internal\ndata structure. Use this wisely as no guarantees are made and crashes can happen."]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"build"})," field follows ",(0,r.jsx)(n.a,{href:"https://itijs.org/docs/quick-start#usage",children:"createContainer"})," function call."]}),"\n",(0,r.jsx)(n.h2,{id:"new-commandtypes",children:"New CommandTypes"}),"\n",(0,r.jsxs)(n.p,{children:["2.0 includes all the new role select menus. ",(0,r.jsx)(n.code,{children:"CommandType.MenuSelect"})," has been renamed into\n",(0,r.jsx)(n.code,{children:"CommandType.StringSelect"}),". The remaining SelectMenus are\n",(0,r.jsx)(n.code,{children:"CommandType.RoleSelect"}),", ",(0,r.jsx)(n.code,{children:"CommandType.ChannelSelect"}),", ",(0,r.jsx)(n.code,{children:"CommandType.UserSelect"}),", ",(0,r.jsx)(n.code,{children:"CommandType.MentionableSelect"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="commands/roleselect.ts"',children:"export default commandModule({\n    type: CommandType.RoleSelect,\n    execute(ctx) {\n        ctx.reply('role select')\n    },\n})\n"})}),"\n",(0,r.jsx)(n.p,{children:"In addition, commandModules with ContextMenus have been renamed."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"- CommandType.MenuUser, CommandType.MenuMsg \n+ CommandType.CtxUser, CommandType.CtxMsg\n"})}),"\n",(0,r.jsx)(n.h2,{id:"typings-simplification",children:"Typings Simplification"}),"\n",(0,r.jsxs)(n.p,{children:["Pre 2.0:\n",(0,r.jsx)(n.img,{src:"https://cdn.discordapp.com/attachments/820348341358952550/1038577974829666386/image.png"}),"\n",(0,r.jsx)(n.br,{})," ",(0,r.jsx)(n.br,{})," ",(0,r.jsx)(n.br,{}),"\nPost 2.0:\n",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.img,{src:"https://cdn.discordapp.com/attachments/820348341358952550/1052623728489550015/image.png"})]}),"\n",(0,r.jsx)(n.p,{children:"CommandPlugin<T> and EventPlugin<T> typings have also been static'ified, transformed from types to interfaces"}),"\n",(0,r.jsx)(n.h2,{id:"breaking-changes",children:"Breaking Changes"}),"\n",(0,r.jsx)(n.img,{src:"https://img.srizan.dev/Discord_z8Sn1UBfEe.png"}),"\n",(0,r.jsx)(n.br,{}),"\nAll deprecation warnings from previous versions have taken effect, and are removed in 2.0.\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"- type Module = EventModule | CommandModule\n+ type AnyModule = EventModule | CommandModule\n\n-export type SpreadParams<T extends (...args: never) => unknown> = (\n-    args: Parameters<T>[number],\n- ) => unknown;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Override type has been removed due to redundancy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"- discord.js : 14.5\n+ discord.js : 14.7\n\n-typescript:  4.7\n+ typescript:  4.9\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"+ interface Wrapper {\n+    readonly defaultPrefix?: string;\n+    readonly commands: string;\n+    readonly events?: string;\n+    readonly containerConfig : {\n+        get: (...keys: (keyof Dependencies)[]) => unknown[];\n+    }\n+}\n\n- interface Wrapper {\n-    readonly client: Client;\n-    readonly sernEmitter?: SernEmitter;\n-    readonly defaultPrefix?: string;\n-    readonly commands: string;\n-    readonly events?:\n-        | string\n-        | { mod: EventModule; absPath: string }[]\n-        | (() => { mod: EventModule; absPath: string }[]);\n-}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"+ DefaultLogger\n+ DefaultModuleManager\n+ SernEmitter\n+ DefaultErrorHandling\n+ type Singleton<T> = () => T\n+ type Transient<T> = () => () => T; \n+ type LogPayload<T = unknown> = { message: T }\n+ export const single = <T>() => T\n+ export const many = <T>() => () => T\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Including the previous section, some names to symbols and data structures were altered to\nbe better represented. view ",(0,r.jsx)(n.a,{href:"/404.html",children:"changelog"})]}),"\n",(0,r.jsx)(n.h2,{id:"context-refactoring",children:"Context refactoring"}),"\n",(0,r.jsx)(n.p,{children:"The context data structure has been internally altered to represent its dynamics better."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);