"use strict";(self.webpackChunk_sern_website=self.webpackChunk_sern_website||[]).push([[3705],{5680:(e,n,a)=>{a.d(n,{xA:()=>m,yg:()=>y});var t=a(6540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),p=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},m=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,y=u["".concat(s,".").concat(d)]||u[d]||g[d]||l;return a?t.createElement(y,i(i({ref:n},m),{},{components:a})):t.createElement(y,i({ref:n},m))}));function y(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7583:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var t=a(8168),r=(a(6540),a(5680));const l={slug:"3.0.0",title:"Release 3.0.0",authors:["jacoobes"],tags:["release"]},i=void 0,o={permalink:"/blog/3.0.0",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-06-18-mdx-blog-post.md",source:"@site/blog/2023-06-18-mdx-blog-post.md",title:"Release 3.0.0",description:"3.0 Release",date:"2023-06-18T00:00:00.000Z",formattedDate:"June 18, 2023",tags:[{label:"release",permalink:"/blog/tags/release"}],readingTime:2.475,hasTruncateMarker:!1,authors:[{name:"jacoobes",title:"Head Dev",url:"https://github.com/jacoobes",imageURL:"https://github.com/jacoobes.png",key:"jacoobes"}],frontMatter:{slug:"3.0.0",title:"Release 3.0.0",authors:["jacoobes"],tags:["release"]},prevItem:{title:"New logo!",permalink:"/blog/newlogo"},nextItem:{title:"Release 2.5.0",permalink:"/blog/2.5.0"}},s={authorsImageUrls:[void 0]},p=[{value:"3.0 Release",id:"30-release",level:2},{value:"Join our discord <br />",id:"join-our-discord-",level:3},{value:"Features",id:"features",level:3},{value:"Dependency Management",id:"dependency-management",level:4},{value:"Quality of Life",id:"quality-of-life",level:4},{value:"Experimental",id:"experimental",level:3},{value:"Breaking changes",id:"breaking-changes",level:3},{value:"Deprecations",id:"deprecations",level:3}],m={toc:p},u="wrapper";function g(e){let{components:n,...a}=e;return(0,r.yg)(u,(0,t.A)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"30-release"},"3.0 Release"),(0,r.yg)("h3",{id:"join-our-discord-"},"Join our ",(0,r.yg)("a",{parentName:"h3",href:"https://sern.dev/discord"},"discord")," ",(0,r.yg)("br",null)),(0,r.yg)("h3",{id:"features"},"Features"),(0,r.yg)("h4",{id:"dependency-management"},"Dependency Management"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"Service")," API (recommended to use this over useContainer hooks)",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Dependencies type must be globally augmented in order for Services api to function properly"))),(0,r.yg)("li",{parentName:"ul"},"new methods on ModuleManager",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"getPublishableCommands()"))),(0,r.yg)("li",{parentName:"ul"},"Init Hooks ",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"implement starting behavior for dependencies"),(0,r.yg)("li",{parentName:"ul"},"To enforce and type check this, use the ",(0,r.yg)("inlineCode",{parentName:"li"},"Initializable")," type when making your Dependencies type!"))),(0,r.yg)("li",{parentName:"ul"},"Emitter interface",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"More generic interface to define any event emitter"),(0,r.yg)("li",{parentName:"ul"},"You can now swap out the SernEmitter with whatever emitter now. ")))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"class DatabaseService implements Init {\n    //some hypothetical database\n    _pgsql : database()  \n\n    async init() {\n       await _pgsql.load()\n    }\n\n}\n\nawait makeDependencies({ \n    build: root => root.add({\n        db: new DatabaseService() //will be init'ed automatically\n    })\n})\n\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"new SernEmitter event ",(0,r.yg)("inlineCode",{parentName:"li"},"modulesLoaded")," , which allows users to customize behavior after all modules are loaded!")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"\nexport default eventModule({\n    name: 'modulesLoaded',\n    type: EventType.Sern,\n    execute: () => {\n        console.log('All modules loaded')\n    }\n})\n\n\n")),(0,r.yg)("h4",{id:"quality-of-life"},"Quality of Life"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"faster module loading"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"I utilize async generators for reading files now. A lot faster than the first iteration."))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"better error handling")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Less boilerplate"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Services api cleans up v2 boilerplate"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"class modules devex got upgraded and work better than before")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"automatically ignore any files not ending in (mts, cts, mjs, cjs, ts, js)"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"ignore commands and events with ",(0,r.yg)("inlineCode",{parentName:"li"},"!")," prefix on filename or directory (ie: ",(0,r.yg)("inlineCode",{parentName:"li"},"!filename.ts")," or ",(0,r.yg)("inlineCode",{parentName:"li"},"!directory")," will be ignored by sern)"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"Service")," API (recommended to use this over useContainer hooks)"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Dependencies type must be globally augmented in order for Services api to function properly"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Less boilerplate")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"new methods on ModuleManager")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"automatically ignore any files not ending in (mts, cts, mjs, cjs, ts, js)"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"ignore commands / events with ",(0,r.yg)("inlineCode",{parentName:"li"},"!")," prefix on filename or directory (ie: ",(0,r.yg)("inlineCode",{parentName:"li"},"!filename.ts")," or ",(0,r.yg)("inlineCode",{parentName:"li"},"!directory"),")"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"new SernEmitter event ",(0,r.yg)("inlineCode",{parentName:"p"},"modulesLoaded")," , which allows users to customize behavior after all modules are loaded!")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Init Hooks "),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"implement starting behavior for dependencies")))),(0,r.yg)("h3",{id:"experimental"},"Experimental"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Experimental things may be subject to removal, need feedback and are not guaranteed stable"),(0,r.yg)("li",{parentName:"ul"},"dev / prod mode ",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"sern will behave differently depending on mode set"))),(0,r.yg)("li",{parentName:"ul"},"init sern from ",(0,r.yg)("inlineCode",{parentName:"li"},"file")," option",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"reads from local sern.config.json")))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"Sern.init('file'); \n")),(0,r.yg)("h3",{id:"breaking-changes"},"Breaking changes"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Sern.makeDependencies -> makeDependencies",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"it is asynchronous and top level function now. Make sure to await it before initing for proper synchronization."))),(0,r.yg)("li",{parentName:"ul"},"module store and manager internally changed, so those using them may recieve breaking changes"),(0,r.yg)("li",{parentName:"ul"},"BaseOptions type removed")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-diff"},"- Sern.makeDependencies({ build: () => {} })\n+ await makeDependencies({ build: () => {} })\n")),(0,r.yg)("h3",{id:"deprecations"},"Deprecations"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Removed all previous marked deprecations in v3"),(0,r.yg)("li",{parentName:"ul"},"ModuleStore will be removed as a dependency in v4. The only way to access modules should be through ModuleManager"),(0,r.yg)("li",{parentName:"ul"},"Default Dependencies will be made internal in the v4. Users should only have access to its interface / contract")))}g.isMDXComponent=!0}}]);