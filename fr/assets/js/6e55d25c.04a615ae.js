"use strict";(self.webpackChunk_sern_website=self.webpackChunk_sern_website||[]).push([[7436],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,h=u["".concat(o,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:i,l[1]=s;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8193:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={},l=void 0,s={unversionedId:"cli/publish",id:"cli/publish",title:"publish",description:"Implicits",source:"@site/docs/cli/publish.md",sourceDirName:"cli",slug:"/cli/publish",permalink:"/fr/docs/cli/publish",draft:!1,editUrl:"https://github.com/sern-handler/website/edit/main/docs/cli/publish.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"extra",permalink:"/fr/docs/cli/extra"},next:{title:"Introduction",permalink:"/fr/docs/guide/"}},o={},c=[{value:"Implicits",id:"implicits",level:2},{value:"Usage",id:"usage",level:2},{value:"Features",id:"features",level:2},{value:"Prerequiring",id:"prerequiring",level:2},{value:"Example: command published in guild",id:"example-command-published-in-guild",level:3},{value:"Script ran:",id:"script-ran",level:4}],p={toc:c},u="wrapper";function m(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"Usage: sern commands publish [options] [path]\n\nNew way to manage your slash commands\n\nArguments:\n  path                          path with respect to current working directory that will locate all published files\n\nOptions:\n  -i, --import [scriptPath...]  Prerequire a script to load into publisher\n  -t, --token [token]\n  --appId [applicationId]\n  -h, --help                    display help for command\n")),(0,i.kt)("h2",{id:"implicits"},"Implicits"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Automatically reads a .env in the working directory. For seamless integration, your .env file should look like this:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt",metastring:'title=".env"',title:'".env"'},"DISCORD_TOKEN=<YOUR_TOKEN>\nAPPLICATION_ID=<YOUR_APPLICATION_ID>\nMODE=<DEV|PROD>\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Calls the discord API with the ",(0,i.kt)("a",{parentName:"li",href:"https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-global-application-commands"},"PUT route"),". Wherever your commands directory is located, publish will override the existing application commands at Discord. Existing commands do not count towards the command limit creation daily. ")),(0,i.kt)("p",null,"You may pass these in as command line arguments as well. ",(0,i.kt)("strong",{parentName:"p"},"CLI arguments take precedence."),"\nIf you do not know how to obtain either of these credentials, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/reactiflux/discord-irc/wiki/Creating-a-discord-bot-&-getting-a-token"},"click here")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"usage",src:n(8654).Z,width:"1171",height:"470"})),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Automatically syncs api with your command base"),(0,i.kt)("li",{parentName:"ul"},"generates JSON file of output (",(0,i.kt)("strong",{parentName:"li"},".sern/command-data-remote.json"),")"),(0,i.kt)("li",{parentName:"ul"},"supports publishing direct esm typescript files"),(0,i.kt)("li",{parentName:"ul"},"commonjs users need to compile first and then run sern publish on the dist/ output"),(0,i.kt)("li",{parentName:"ul"},"prerequire scripts."),(0,i.kt)("li",{parentName:"ul"},"supports a configuration that is the same as the original publish plugin.")),(0,i.kt)("p",null,"Each command file can have an extra config that follows this typescript interface:\nPermissionResolvable is a discord.js type, but it will accept anything that the discord API accepts"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface ValidPublishOptions {\n    guildIds: string[];\n    dmPermission: boolean;\n    defaultMemberPermissions: PermissionResolvable;\n}\n\n")),(0,i.kt)("h2",{id:"prerequiring"},"Prerequiring"),(0,i.kt)("p",null,"Is there a ",(0,i.kt)("a",{parentName:"p",href:"../guide/walkthrough/services"},"service")," that is required at the top level of a command?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create an ES6 script anywhere: ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="scripts/prerequire.mjs"',title:'"scripts/prerequire.mjs"'},"import { makeDependencies, single, Service } from '@sern/handler'\nimport { Client } from 'discord.js'\n\nawait makeDependencies({\n    root => root.add({ '@sern/client': single(() => new Client(...options) }))    \n}) \n\nawait Service('@sern/client').login()\n")),(0,i.kt)("p",null,"This will create a container for publishing. (as of 0.6.0, client is required or this will crash)"),(0,i.kt)("h3",{id:"example-command-published-in-guild"},"Example: command published in guild"),(0,i.kt)("h4",{id:"script-ran"},"Script ran:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sern commands publish -i ./scripts/prerequire.mjs\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/commands/ping.ts",title:"src/commands/ping.ts"},"import { commandModule, Service, CommandType } from '@sern/handler'\n\nconst client = Service('@sern/client');\n\nexport const config = { \n    guildIds: [\"889026545715400705\"]\n}\n\nexport default commandModule( {\n    type: CommandType.Slash\n    description: `${client.user.username}'s ping`,\n    execute: (ctx) => { \n        ctx.reply('pong')\n    }\n})\n\n")))}m.isMDXComponent=!0},8654:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Code_-_Insiders_2kTVzm0uIQ-76ace605cf3a0c5b7a55cb2c5228fcfa.gif"}}]);